// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.0--rc3
// source: mate-server/proto/mate-server.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MateServiceClient is the client API for MateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MateServiceClient interface {
	Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error)
	Push(ctx context.Context, in *PushRequest, opts ...grpc.CallOption) (*PushResponse, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	PushStream(ctx context.Context, opts ...grpc.CallOption) (MateService_PushStreamClient, error)
	GetStream(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (MateService_GetStreamClient, error)
}

type mateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMateServiceClient(cc grpc.ClientConnInterface) MateServiceClient {
	return &mateServiceClient{cc}
}

func (c *mateServiceClient) Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error) {
	out := new(JoinResponse)
	err := c.cc.Invoke(ctx, "/mate.server.proto.MateService/Join", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mateServiceClient) Push(ctx context.Context, in *PushRequest, opts ...grpc.CallOption) (*PushResponse, error) {
	out := new(PushResponse)
	err := c.cc.Invoke(ctx, "/mate.server.proto.MateService/Push", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mateServiceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/mate.server.proto.MateService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mateServiceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/mate.server.proto.MateService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mateServiceClient) PushStream(ctx context.Context, opts ...grpc.CallOption) (MateService_PushStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &MateService_ServiceDesc.Streams[0], "/mate.server.proto.MateService/PushStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &mateServicePushStreamClient{stream}
	return x, nil
}

type MateService_PushStreamClient interface {
	Send(*PushRequest) error
	CloseAndRecv() (*PushResponse, error)
	grpc.ClientStream
}

type mateServicePushStreamClient struct {
	grpc.ClientStream
}

func (x *mateServicePushStreamClient) Send(m *PushRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *mateServicePushStreamClient) CloseAndRecv() (*PushResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(PushResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mateServiceClient) GetStream(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (MateService_GetStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &MateService_ServiceDesc.Streams[1], "/mate.server.proto.MateService/GetStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &mateServiceGetStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MateService_GetStreamClient interface {
	Recv() (*GetResponse, error)
	grpc.ClientStream
}

type mateServiceGetStreamClient struct {
	grpc.ClientStream
}

func (x *mateServiceGetStreamClient) Recv() (*GetResponse, error) {
	m := new(GetResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MateServiceServer is the server API for MateService service.
// All implementations must embed UnimplementedMateServiceServer
// for forward compatibility
type MateServiceServer interface {
	Join(context.Context, *JoinRequest) (*JoinResponse, error)
	Push(context.Context, *PushRequest) (*PushResponse, error)
	Get(context.Context, *GetRequest) (*GetResponse, error)
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	PushStream(MateService_PushStreamServer) error
	GetStream(*GetRequest, MateService_GetStreamServer) error
	mustEmbedUnimplementedMateServiceServer()
}

// UnimplementedMateServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMateServiceServer struct {
}

func (UnimplementedMateServiceServer) Join(context.Context, *JoinRequest) (*JoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Join not implemented")
}
func (UnimplementedMateServiceServer) Push(context.Context, *PushRequest) (*PushResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Push not implemented")
}
func (UnimplementedMateServiceServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedMateServiceServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedMateServiceServer) PushStream(MateService_PushStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method PushStream not implemented")
}
func (UnimplementedMateServiceServer) GetStream(*GetRequest, MateService_GetStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetStream not implemented")
}
func (UnimplementedMateServiceServer) mustEmbedUnimplementedMateServiceServer() {}

// UnsafeMateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MateServiceServer will
// result in compilation errors.
type UnsafeMateServiceServer interface {
	mustEmbedUnimplementedMateServiceServer()
}

func RegisterMateServiceServer(s grpc.ServiceRegistrar, srv MateServiceServer) {
	s.RegisterService(&MateService_ServiceDesc, srv)
}

func _MateService_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MateServiceServer).Join(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mate.server.proto.MateService/Join",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MateServiceServer).Join(ctx, req.(*JoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MateService_Push_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MateServiceServer).Push(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mate.server.proto.MateService/Push",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MateServiceServer).Push(ctx, req.(*PushRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MateService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MateServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mate.server.proto.MateService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MateServiceServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MateService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MateServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mate.server.proto.MateService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MateServiceServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MateService_PushStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MateServiceServer).PushStream(&mateServicePushStreamServer{stream})
}

type MateService_PushStreamServer interface {
	SendAndClose(*PushResponse) error
	Recv() (*PushRequest, error)
	grpc.ServerStream
}

type mateServicePushStreamServer struct {
	grpc.ServerStream
}

func (x *mateServicePushStreamServer) SendAndClose(m *PushResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *mateServicePushStreamServer) Recv() (*PushRequest, error) {
	m := new(PushRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MateService_GetStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MateServiceServer).GetStream(m, &mateServiceGetStreamServer{stream})
}

type MateService_GetStreamServer interface {
	Send(*GetResponse) error
	grpc.ServerStream
}

type mateServiceGetStreamServer struct {
	grpc.ServerStream
}

func (x *mateServiceGetStreamServer) Send(m *GetResponse) error {
	return x.ServerStream.SendMsg(m)
}

// MateService_ServiceDesc is the grpc.ServiceDesc for MateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mate.server.proto.MateService",
	HandlerType: (*MateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Join",
			Handler:    _MateService_Join_Handler,
		},
		{
			MethodName: "Push",
			Handler:    _MateService_Push_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _MateService_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _MateService_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PushStream",
			Handler:       _MateService_PushStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetStream",
			Handler:       _MateService_GetStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "mate-server/proto/mate-server.proto",
}
