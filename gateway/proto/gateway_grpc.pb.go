// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.0--rc3
// source: gateway/proto/gateway.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RegistryClient is the client API for Registry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RegistryClient interface {
	Register(ctx context.Context, in *RegisterInfo, opts ...grpc.CallOption) (*RegisterRes, error)
	UnRegister(ctx context.Context, in *UnRegisterInfo, opts ...grpc.CallOption) (*UnRegisterRes, error)
	Heartbeat(ctx context.Context, in *HeartbeatInfo, opts ...grpc.CallOption) (*HeartbeatResp, error)
	GetProvideServices(ctx context.Context, in *GetProvideInfo, opts ...grpc.CallOption) (*GetProvidesResp, error)
	GetProvideService(ctx context.Context, in *GetProvideInfo, opts ...grpc.CallOption) (*GetProvideResp, error)
	// rpc GetLeaderMate (Empty) returns (GetProvideResp) {}
	GetProvideByName(ctx context.Context, in *GetByNameInfo, opts ...grpc.CallOption) (*GetProvideResp, error)
	GetHistoryAllServiceCnt(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetServiceCntResp, error)
}

type registryClient struct {
	cc grpc.ClientConnInterface
}

func NewRegistryClient(cc grpc.ClientConnInterface) RegistryClient {
	return &registryClient{cc}
}

func (c *registryClient) Register(ctx context.Context, in *RegisterInfo, opts ...grpc.CallOption) (*RegisterRes, error) {
	out := new(RegisterRes)
	err := c.cc.Invoke(ctx, "/proto.Registry/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) UnRegister(ctx context.Context, in *UnRegisterInfo, opts ...grpc.CallOption) (*UnRegisterRes, error) {
	out := new(UnRegisterRes)
	err := c.cc.Invoke(ctx, "/proto.Registry/UnRegister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) Heartbeat(ctx context.Context, in *HeartbeatInfo, opts ...grpc.CallOption) (*HeartbeatResp, error) {
	out := new(HeartbeatResp)
	err := c.cc.Invoke(ctx, "/proto.Registry/Heartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) GetProvideServices(ctx context.Context, in *GetProvideInfo, opts ...grpc.CallOption) (*GetProvidesResp, error) {
	out := new(GetProvidesResp)
	err := c.cc.Invoke(ctx, "/proto.Registry/GetProvideServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) GetProvideService(ctx context.Context, in *GetProvideInfo, opts ...grpc.CallOption) (*GetProvideResp, error) {
	out := new(GetProvideResp)
	err := c.cc.Invoke(ctx, "/proto.Registry/GetProvideService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) GetProvideByName(ctx context.Context, in *GetByNameInfo, opts ...grpc.CallOption) (*GetProvideResp, error) {
	out := new(GetProvideResp)
	err := c.cc.Invoke(ctx, "/proto.Registry/GetProvideByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) GetHistoryAllServiceCnt(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetServiceCntResp, error) {
	out := new(GetServiceCntResp)
	err := c.cc.Invoke(ctx, "/proto.Registry/GetHistoryAllServiceCnt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegistryServer is the server API for Registry service.
// All implementations must embed UnimplementedRegistryServer
// for forward compatibility
type RegistryServer interface {
	Register(context.Context, *RegisterInfo) (*RegisterRes, error)
	UnRegister(context.Context, *UnRegisterInfo) (*UnRegisterRes, error)
	Heartbeat(context.Context, *HeartbeatInfo) (*HeartbeatResp, error)
	GetProvideServices(context.Context, *GetProvideInfo) (*GetProvidesResp, error)
	GetProvideService(context.Context, *GetProvideInfo) (*GetProvideResp, error)
	// rpc GetLeaderMate (Empty) returns (GetProvideResp) {}
	GetProvideByName(context.Context, *GetByNameInfo) (*GetProvideResp, error)
	GetHistoryAllServiceCnt(context.Context, *Empty) (*GetServiceCntResp, error)
	mustEmbedUnimplementedRegistryServer()
}

// UnimplementedRegistryServer must be embedded to have forward compatible implementations.
type UnimplementedRegistryServer struct {
}

func (UnimplementedRegistryServer) Register(context.Context, *RegisterInfo) (*RegisterRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedRegistryServer) UnRegister(context.Context, *UnRegisterInfo) (*UnRegisterRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnRegister not implemented")
}
func (UnimplementedRegistryServer) Heartbeat(context.Context, *HeartbeatInfo) (*HeartbeatResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}
func (UnimplementedRegistryServer) GetProvideServices(context.Context, *GetProvideInfo) (*GetProvidesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProvideServices not implemented")
}
func (UnimplementedRegistryServer) GetProvideService(context.Context, *GetProvideInfo) (*GetProvideResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProvideService not implemented")
}
func (UnimplementedRegistryServer) GetProvideByName(context.Context, *GetByNameInfo) (*GetProvideResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProvideByName not implemented")
}
func (UnimplementedRegistryServer) GetHistoryAllServiceCnt(context.Context, *Empty) (*GetServiceCntResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHistoryAllServiceCnt not implemented")
}
func (UnimplementedRegistryServer) mustEmbedUnimplementedRegistryServer() {}

// UnsafeRegistryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RegistryServer will
// result in compilation errors.
type UnsafeRegistryServer interface {
	mustEmbedUnimplementedRegistryServer()
}

func RegisterRegistryServer(s grpc.ServiceRegistrar, srv RegistryServer) {
	s.RegisterService(&Registry_ServiceDesc, srv)
}

func _Registry_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Registry/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).Register(ctx, req.(*RegisterInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_UnRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnRegisterInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).UnRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Registry/UnRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).UnRegister(ctx, req.(*UnRegisterInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Registry/Heartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).Heartbeat(ctx, req.(*HeartbeatInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_GetProvideServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProvideInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).GetProvideServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Registry/GetProvideServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).GetProvideServices(ctx, req.(*GetProvideInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_GetProvideService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProvideInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).GetProvideService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Registry/GetProvideService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).GetProvideService(ctx, req.(*GetProvideInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_GetProvideByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByNameInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).GetProvideByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Registry/GetProvideByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).GetProvideByName(ctx, req.(*GetByNameInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_GetHistoryAllServiceCnt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).GetHistoryAllServiceCnt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Registry/GetHistoryAllServiceCnt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).GetHistoryAllServiceCnt(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Registry_ServiceDesc is the grpc.ServiceDesc for Registry service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Registry_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Registry",
	HandlerType: (*RegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Registry_Register_Handler,
		},
		{
			MethodName: "UnRegister",
			Handler:    _Registry_UnRegister_Handler,
		},
		{
			MethodName: "Heartbeat",
			Handler:    _Registry_Heartbeat_Handler,
		},
		{
			MethodName: "GetProvideServices",
			Handler:    _Registry_GetProvideServices_Handler,
		},
		{
			MethodName: "GetProvideService",
			Handler:    _Registry_GetProvideService_Handler,
		},
		{
			MethodName: "GetProvideByName",
			Handler:    _Registry_GetProvideByName_Handler,
		},
		{
			MethodName: "GetHistoryAllServiceCnt",
			Handler:    _Registry_GetHistoryAllServiceCnt_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gateway/proto/gateway.proto",
}
